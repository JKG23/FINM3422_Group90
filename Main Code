import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from fpdf import FPDF

#Extracting Historicals from yfinance as a csv
#Defining the ticker for HMC Capital Limited 
ticker1 = 'HMC.AX'

#Downloading historical data 
hmc = yf.download (ticker1, start='2021-12-30', end='2025-04-27')
print(hmc.head())
print(len(hmc)) 
hmc.to_csv(f'{ticker1}_HMC_historical_data.csv')
print("HMC prices downloaded.")

#Defining the ticker for S&P/ASX200
ticker2 = '^AXJO'

#Downloading historical data
asx200 = yf.download (ticker2, start='2021-12-30', end='2025-04-27')
asx200.to_csv(f'{ticker2}_ASX200_historical_data.csv')
print(asx200.head())
print("ASX200 prices downloaded.")

hmc.to_csv('HMC.AX_HMC_historical_data.csv')
asx200.to_csv('^AXJO_ASX200_historical_data.csv')

price_targets = pd.read_csv('price_targets.csv')
price_targets['Date'] = pd.to_datetime(price_targets['Date'])

#Graph 1: HMC Share Price over time
plt.figure(figsize=(14, 7)) 

#Plotting 
plt.plot(hmc.index, hmc['Close'], label='HMC Share Price', color='blue')
plt.title('HMC Capital Historical Close Prices')

#Labelling x-axis 
plt.xlabel('Date')

#Labelling y-axis 
plt.ylabel('Closing Price (AUD)')

#Adding legend and grid
plt.legend()
plt.grid(True)
plt.tight_layout()

#Saving chart 
plt.savefig('hmc_share_price.png')
plt.show()
print("Graph 1: HMC Share Price plotted and saved.")

#Graph 2: HMC vs ASX 200
plt.figure(figsize=(14, 7)) 

#Plotting HMC share price (logarithmic scale)
plt.plot(hmc.index, hmc['Close'], label='HMC Share Price', color='blue')

#Plotting ASX200 index (logarithmic scale)
plt.plot(asx200.index, asx200['Close'], label='ASX200 Index', color='grey', linestyle='--')

#Apply log scale to the y-axis for both HMC and ASX200
plt.yscale('log')

#Adding title and axis labels
plt.title('HMC vs ASX200 - Historical Close Prices (Log Scale)')
plt.xlabel('Date')
plt.ylabel('Closing Price (AUD)')

#Adding legend and grid
plt.legend()
plt.grid(True)

#Save and Show for Graph 2
plt.tight_layout()
plt.savefig('hmc_vs_asx200_log_scale.png')
plt.show()  # Display the plot
print("Graph 2: HMC vs ASX200 with Logarithmic Scale plotted and saved.")

#Graph 3: stock price, price targets, and ASX200 chart 
fig, ax1 = plt.subplots(figsize=(14, 7))

#Plotting HMC share price 
ax1.plot(hmc.index, hmc['Close'], label='HMC Share Price', color='blue')

#Plotting analyst price targets 
ax1.plot(price_targets['Date'], price_targets['Target Price'], linestyle='--', marker='o', color='black', label='Analyst Price Targets')

#Plotting y-axis 
ax1.set_xlabel('Date')
ax1.set_ylabel('HMC Price (AUD)', color='blue')
ax1.tick_params(axis='y', labelcolor='blue')

#Creating secondary axis for ASX200
ax2 = ax1.twinx()
ax2.plot(asx200.index, asx200['Close'], label='ASX200 Index', color='grey', linestyle='--')
ax2.set_ylabel('ASX200 Index Level', color='grey')
ax2.tick_params(axis='y', labelcolor='grey')

#Creating model title and grid 
fig.suptitle('HMC Share Price, Analyst Targets, and ASX200 Index', fontsize=16)

#Combining legends 
lines1, labels1 = ax1.get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()
ax1.legend(lines1 + lines2, labels1 + labels2, loc='upper left')

plt.grid(True)
plt.tight_layout()

#Saving chart
plt.savefig('hmc_chart.png')
plt.show()
print("Chart created and saved as hmc_chart.png")





